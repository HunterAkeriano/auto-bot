import dotenv from 'dotenv';
import { Telegraf } from 'telegraf';
import cron from 'node-cron';
import { GoogleGenerativeAI } from '@google/generative-ai';

dotenv.config();

const TELEGRAM_CONFIG = {
    CHANNEL_CHAT_ID: process.env.CHANNEL_CHAT_ID,
    CHANNEL_LINK: process.env.CHANNEL_LINK,
    BOT_TOKEN: process.env.TELEGRAM_BOT_TOKEN
};

const GEMINI_CONFIG = {
    API_KEY: process.env.GEMINI_API_KEY,
    MODEL: 'gemini-2.5-flash'
};

const ZODIAC_SIGNS = [
    { name: '–û–≤–µ–Ω', emoji: '‚ôàÔ∏è' },
    { name: '–¢–µ–ª–µ—Ü—å', emoji: '‚ôâÔ∏è' },
    { name: '–ë–ª–∏–∑–Ω—é–∫–∏', emoji: '‚ôäÔ∏è' },
    { name: '–†–∞–∫', emoji: '‚ôãÔ∏è' },
    { name: '–õ–µ–≤', emoji: '‚ôåÔ∏è' },
    { name: '–î—ñ–≤–∞', emoji: '‚ôçÔ∏è' },
    { name: '–¢–µ—Ä–µ–∑–∏', emoji: '‚ôéÔ∏è' },
    { name: '–°–∫–æ—Ä–ø—ñ–æ–Ω', emoji: '‚ôèÔ∏è' },
    { name: '–°—Ç—Ä—ñ–ª–µ—Ü—å', emoji: '‚ôêÔ∏è' },
    { name: '–ö–æ–∑–µ—Ä—ñ–≥', emoji: '‚ôëÔ∏è' },
    { name: '–í–æ–¥–æ–ª—ñ–π', emoji: '‚ôíÔ∏è' },
    { name: '–†–∏–±–∏', emoji: '‚ôìÔ∏è' }
];

if (!TELEGRAM_CONFIG.BOT_TOKEN || !GEMINI_CONFIG.API_KEY || !TELEGRAM_CONFIG.CHANNEL_CHAT_ID || !TELEGRAM_CONFIG.CHANNEL_LINK) {
    console.error('‚ùå –û—à–∏–±–∫–∞: –ù–µ –Ω–∞–π–¥–µ–Ω—ã –≤—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ñ–∞–π–ª .env');
    process.exit(1);
}

const bot = new Telegraf(TELEGRAM_CONFIG.BOT_TOKEN);
const genAI = new GoogleGenerativeAI(GEMINI_CONFIG.API_KEY);
const model = genAI.getGenerativeModel({ model: GEMINI_CONFIG.MODEL });
const TIMEZONE = 'Europe/Kiev';

function getMonthNameUa(date) {
    const monthNamesUa = [
        '—Å—ñ—á–Ω—è', '–ª—é—Ç–æ–≥–æ', '–±–µ—Ä–µ–∑–Ω—è', '–∫–≤—ñ—Ç–Ω—è', '—Ç—Ä–∞–≤–Ω—è', '—á–µ—Ä–≤–Ω—è',
        '–ª–∏–ø–Ω—è', '—Å–µ—Ä–ø–Ω—è', '–≤–µ—Ä–µ—Å–Ω—è', '–∂–æ–≤—Ç–Ω—è', '–ª–∏—Å—Ç–æ–ø–∞–¥–∞', '–≥—Ä—É–¥–Ω—è'
    ];
    return monthNamesUa[date.getMonth()];
}

function calculateWeekRange(today) {
    const currentDayOfWeek = today.getDay();
    const monday = new Date(today);
    monday.setDate(today.getDate() - (currentDayOfWeek === 0 ? 6 : currentDayOfWeek - 1));
    const startWeek = `${monday.getDate()} ${getMonthNameUa(monday)}`;

    const sunday = new Date(monday);
    sunday.setDate(monday.getDate() + 6);
    const endWeek = `${sunday.getDate()} ${getMonthNameUa(sunday)}`;

    return `${startWeek} ‚Äî ${endWeek}`;
}

function calculateLifePathNumber(date) {
    const day = date.getDate().toString().padStart(2, '0');
    const month = (date.getMonth() + 1).toString().padStart(2, '0');
    const year = date.getFullYear().toString();

    const fullDate = `${day}${month}${year}`;
    let sum = 0;

    for (let i = 0; i < fullDate.length; i++) {
        sum += parseInt(fullDate[i], 10);
    }

    while (sum > 9 && sum !== 11 && sum !== 22) {
        sum = sum.toString().split('').reduce((acc, digit) => acc + parseInt(digit, 10), 0);
    }

    return sum;
}


async function publishPost(message, postName) {
    try {
        await bot.telegram.sendMessage(TELEGRAM_CONFIG.CHANNEL_CHAT_ID, message, { parse_mode: 'Markdown', disable_web_page_preview: true   });
        console.log(`‚úÖ ${postName} —É—Å–ø—ñ—à–Ω–æ –æ–ø—É–±–ª—ñ–∫–æ–≤–∞–Ω–∏–π!`);
    } catch (telegramError) {
        console.error(`‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ ${postName}:`, telegramError.message);
        throw new Error('Telegram Publish Error: ' + telegramError.message);
    }
}

async function generateContent(prompt, sign = 'General') {
    const MAX_RETRIES = 3;
    const RETRY_DELAY = 5000;

    for (let attempt = 1; attempt <= MAX_RETRIES; attempt++) {
        try {
            console.log(`[${sign}] –°–ø—Ä–æ–±–∞ –≥–µ–Ω–µ—Ä–∞—Ü—ñ—ó ‚Ññ${attempt}...`);
            const result = await model.generateContent(prompt);

            const generatedText = result.response.text().trim().replace(/[\r\n]{2,}/g, '\n');

            if (attempt > 1) {
                console.log(`‚úÖ [${sign}] –£—Å–ø—ñ—Ö –ø—ñ—Å–ª—è ${attempt} —Å–ø—Ä–æ–±–∏.`);
            }

            return generatedText;

        } catch (error) {
            console.error(`‚ö†Ô∏è [${sign}] –ü–æ–º–∏–ª–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü—ñ—ó –Ω–∞ —Å–ø—Ä–æ–±—ñ ${attempt}: ${error.message.substring(0, 100)}`);

            if (attempt === MAX_RETRIES) {
                console.error(`‚ùå [${sign}] –ö—Ä–∏—Ç–∏—á–Ω–∞ –ø–æ–º–∏–ª–∫–∞. –í–∏—á–µ—Ä–ø–∞–Ω–æ –≤—Å—ñ ${MAX_RETRIES} —Å–ø—Ä–æ–±–∏.`);
                return `‚ùå –ó–æ—Ä—ñ —Å—å–æ–≥–æ–¥–Ω—ñ –Ω–µ—Ä–æ–∑–±—ñ—Ä–ª–∏–≤—ñ, –∞–±–æ –∂ –∫–∞–Ω–∞–ª –∑–≤'—è–∑–∫—É –ø–µ—Ä–µ—Ä–≤–∞–Ω–æ. –°–ø—Ä–æ–±—É—î–º–æ –∑–∞–≤—Ç—Ä–∞!`;
            }

            await new Promise(r => setTimeout(r, RETRY_DELAY));
        }
    }
}


async function generateHoroscope(sign, promptStyle, dayContext) {
    let basePrompt;
    const wordLimit = promptStyle === 'serious' ? 35 : 20;

    if (promptStyle === 'serious') {
        basePrompt = `–°–∫–ª–∞–¥–∏ —ñ–Ω—Ñ–æ—Ä–º–∞—Ç–∏–≤–Ω–∏–π, –Ω–µ–π—Ç—Ä–∞–ª—å–Ω–∏–π –ø—Ä–æ–≥–Ω–æ–∑ –Ω–∞ ${dayContext} –¥–ª—è –∑–Ω–∞–∫—É –∑–æ–¥—ñ–∞–∫—É ${sign} —É–∫—Ä–∞—ó–Ω—Å—å–∫–æ—é –º–æ–≤–æ—é. –ù–µ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π –Ω–∞–¥–º—ñ—Ä–Ω—É –∫—ñ–ª—å–∫—ñ—Å—Ç—å –µ–º–æ–¥–∑—ñ, –æ–∫–ª–∏—á–Ω–∏—Ö –∑–Ω–∞–∫—ñ–≤ —á–∏ —Å–ª–µ–Ω–≥—É. –î–æ—Ç—Ä–∏–º—É–π—Å—è –¥—ñ–ª–æ–≤–æ–≥–æ –∞–±–æ –ø—Å–∏—Ö–æ–ª–æ–≥—ñ—á–Ω–æ–≥–æ —Ç–æ–Ω—É. –î–æ–≤–∂–∏–Ω–∞ —Ç–µ–∫—Å—Ç—É –ø—Ä–æ–≥–Ω–æ–∑—É –ù–ï –ü–û–í–ò–ù–ù–ê –ø–µ—Ä–µ–≤–∏—â—É–≤–∞—Ç–∏ ${wordLimit} —Å–ª—ñ–≤.`;
    } else if (promptStyle === 'funny') {
        basePrompt = `–°–∫–ª–∞–¥–∏ –∫—É–º–µ–¥–Ω–∏–π, —ñ—Ä–æ–Ω—ñ—á–Ω–∏–π, –∫–æ—Ä–æ—Ç–∫–∏–π, –∂–∞—Ä—Ç—ñ–≤–ª–∏–≤–∏–π –ø—Ä–æ–≥–Ω–æ–∑ –Ω–∞ ${dayContext} –¥–ª—è –∑–Ω–∞–∫—É –∑–æ–¥—ñ–∞–∫—É ${sign} —É–∫—Ä–∞—ó–Ω—Å—å–∫–æ—é –º–æ–≤–æ—é. –ö–æ–∂–µ–Ω –ø—Ä–æ–≥–Ω–æ–∑ –º–∞—î –±—É—Ç–∏ –æ–¥–Ω–∏–º –ª–∞–∫–æ–Ω—ñ—á–Ω–∏–º —Ä–µ—á–µ–Ω–Ω—è–º, —è–∫–µ –≤–∏–∫–ª–∏–∫–∞—î –ø–æ—Å–º—ñ—à–∫—É. –î–æ–≤–∂–∏–Ω–∞ —Ç–µ–∫—Å—Ç—É –ù–ï –ü–û–í–ò–ù–ù–ê –ø–µ—Ä–µ–≤–∏—â—É–≤–∞—Ç–∏ ${wordLimit} —Å–ª—ñ–≤.`;
    } else {
        throw new Error("–ù–µ–≤—ñ–¥–æ–º–∏–π —Å—Ç–∏–ª—å –ø—Ä–æ–º–ø—Ç–∞");
    }

    return generateContent(basePrompt, sign);
}

async function generateTarotReading(dayContext) {
    const prompt = `–í–∏–±–µ—Ä–∏ –æ–¥–Ω—É –≤–∏–ø–∞–¥–∫–æ–≤—É —Å—Ç–∞—Ä—à—É –∫–∞—Ä—Ç—É –¢–∞—Ä–æ (Major Arcana). –ù–∞–¥–∞–π —ó—ó –Ω–∞–∑–≤—É —É–∫—Ä–∞—ó–Ω—Å—å–∫–æ—é —Ç–∞ –∫–æ—Ä–æ—Ç–∫–∏–π, –ø–æ–∑–∏—Ç–∏–≤–Ω–∏–π –æ–ø–∏—Å —ó—ó –∑–Ω–∞—á–µ–Ω–Ω—è –¥–ª—è –ø—Ä–æ–≥–Ω–æ–∑—É –Ω–∞ ${dayContext}. –§–æ—Ä–º–∞—Ç: *[–ù–∞–∑–≤–∞ –ö–∞—Ä—Ç–∏]*\n–û–ø–∏—Å —Ç–∞ –ø—Ä–æ–≥–Ω–æ–∑. –î–æ–≤–∂–∏–Ω–∞ —Ç–µ–∫—Å—Ç—É –Ω–µ –±—ñ–ª—å—à–µ 70 —Å–ª—ñ–≤.`;
    return generateContent(prompt, 'Tarot');
}

async function generateCompatibilityReading(sign1, sign2) {
    const prompt = `–°–∫–ª–∞–¥–∏ –¥–µ—Ç–∞–ª—å–Ω–∏–π, –ø–æ–∑–∏—Ç–∏–≤–Ω–∏–π –æ–ø–∏—Å —Å—É–º—ñ—Å–Ω–æ—Å—Ç—ñ –∑–Ω–∞–∫—ñ–≤ –∑–æ–¥—ñ–∞–∫—É *${sign1}* —Ç–∞ *${sign2}* —É —Å—Ñ–µ—Ä—ñ —Å—Ç–æ—Å—É–Ω–∫—ñ–≤. –í–∏–¥—ñ–ª–∏ —Å–∏–ª—å–Ω—ñ —Å—Ç–æ—Ä–æ–Ω–∏ —Ü—ñ—î—ó –ø–∞—Ä–∏ —Ç–∞ –¥–∞–π –ø–æ—Ä–∞–¥—É. –ó–∞–≥–∞–ª—å–Ω–∞ –¥–æ–≤–∂–∏–Ω–∞ —Ç–µ–∫—Å—Ç—É –ù–ï –ü–û–í–ò–ù–ù–ê –ø–µ—Ä–µ–≤–∏—â—É–≤–∞—Ç–∏ 150 —Å–ª—ñ–≤.`;
    return generateContent(prompt, `Compatibility: ${sign1} & ${sign2}`);
}

async function generateWeeklyHoroscopeReading(sign) {
    const prompt = `–°–∫–ª–∞–¥–∏ —ñ–Ω—Ñ–æ—Ä–º–∞—Ç–∏–≤–Ω–∏–π, –Ω–µ–π—Ç—Ä–∞–ª—å–Ω–∏–π –ø—Ä–æ–≥–Ω–æ–∑ –¥–ª—è –∑–Ω–∞–∫—É –∑–æ–¥—ñ–∞–∫—É *${sign}* –Ω–∞ –ø–æ—Ç–æ—á–Ω–∏–π —Ç–∏–∂–¥–µ–Ω—å. –û–ø–∏—à–∏ –æ—Å–Ω–æ–≤–Ω—ñ —Ç–µ–Ω–¥–µ–Ω—Ü—ñ—ó (—Ä–æ–±–æ—Ç–∞, —Ñ—ñ–Ω–∞–Ω—Å–∏, –æ—Å–æ–±–∏—Å—Ç–µ –∂–∏—Ç—Ç—è) –æ–¥–Ω–∏–º-–¥–≤–æ–º–∞ –ª–∞–∫–æ–Ω—ñ—á–Ω–∏–º–∏ —Ä–µ—á–µ–Ω–Ω—è–º–∏. –î–æ–≤–∂–∏–Ω–∞ —Ç–µ–∫—Å—Ç—É –ù–ï –ü–û–í–ò–ù–ù–ê –ø–µ—Ä–µ–≤–∏—â—É–≤–∞—Ç–∏ 35 —Å–ª—ñ–≤.`;
    return generateContent(prompt, sign);
}

async function generateNumerologyReading(number, dateString) {
    const prompt = `–°–∫–ª–∞–¥–∏ –Ω–∞–¥–∏—Ö–∞—é—á–∏–π –ø—Ä–æ–≥–Ω–æ–∑ —É–∫—Ä–∞—ó–Ω—Å—å–∫–æ—é –º–æ–≤–æ—é –¥–ª—è *–ß–∏—Å–ª–∞ –î–Ω—è ${number}* –Ω–∞ –¥–∞—Ç—É ${dateString}. –û–ø–∏—à–∏ –∫–ª—é—á–æ–≤—ñ —Ç–µ–Ω–¥–µ–Ω—Ü—ñ—ó —Ü—å–æ–≥–æ —á–∏—Å–ª–∞ —Ç–∞ –¥–∞–π –ø–æ—Ä–∞–¥—É, —è–∫ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞—Ç–∏ –π–æ–≥–æ –µ–Ω–µ—Ä–≥—ñ—é. –î–æ–≤–∂–∏–Ω–∞ —Ç–µ–∫—Å—Ç—É –ù–ï –ü–û–í–ò–ù–ù–ê –ø–µ—Ä–µ–≤–∏—â—É–≤–∞—Ç–∏ 80 —Å–ª—ñ–≤.`;
    return generateContent(prompt, `Numerology: ${number}`);
}

async function generateDailyWish(dateString) {
    const prompt = `–°–∫–ª–∞–¥–∏ –∫–æ—Ä–æ—Ç–∫–µ, –ø–æ–∑–∏—Ç–∏–≤–Ω–µ, –º–æ—Ç–∏–≤—É—é—á–µ *–ü–æ–±–∞–∂–∞–Ω–Ω—è –Ω–∞ ${dateString}*. –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π –µ–º–æ–¥–∑—ñ. –¢–µ–∫—Å—Ç –º–∞—î –±—É—Ç–∏ –Ω–∞–¥–∏—Ö–∞—é—á–∏–º. –î–æ–≤–∂–∏–Ω–∞ —Ç–µ–∫—Å—Ç—É –ù–ï –ü–û–í–ò–ù–ù–ê –ø–µ—Ä–µ–≤–∏—â—É–≤–∞—Ç–∏ 25 —Å–ª—ñ–≤.`;
    return generateContent(prompt, 'Daily Wish');
}

async function generateDailyTarotAnalysis(dayContext) {
    const prompt = `–í–∏–±–µ—Ä–∏ —Ç—Ä–∏ –≤–∏–ø–∞–¥–∫–æ–≤—ñ —Å—Ç–∞—Ä—à—ñ –∫–∞—Ä—Ç–∏ –¢–∞—Ä–æ (Major Arcana). –ù–∞–¥–∞–π —ó—Ö–Ω—ñ –Ω–∞–∑–≤–∏ —É–∫—Ä–∞—ó–Ω—Å—å–∫–æ—é —Ç–∞ —Å–∫–ª–∞–¥–∏ –Ω–∞ —ó—Ö–Ω—ñ–π –æ—Å–Ω–æ–≤—ñ –∫–æ—Ä–æ—Ç–∫–∏–π, –∞–ª–µ –∑–º—ñ—Å—Ç–æ–≤–Ω–∏–π "—Ä–æ–∑–±—ñ—Ä —Ç–∞—Ä–æ" –Ω–∞ ${dayContext}. –°—Ñ–æ—Ä–º—É–ª—é–π –ø–æ—Ä–∞–¥—É —Ç–∞ –∫–ª—é—á–æ–≤–∏–π –º–µ—Å–µ–¥–∂. –§–æ—Ä–º–∞—Ç: *[–ù–∞–∑–≤–∞ –ö–∞—Ä—Ç–∏ 1]*, *[–ù–∞–∑–≤–∞ –ö–∞—Ä—Ç–∏ 2]*, *[–ù–∞–∑–≤–∞ –ö–∞—Ä—Ç–∏ 3]*. –ü–æ—Ç—ñ–º –æ–ø–∏—Å —Ä–æ–∑–±–æ—Ä—É. –î–æ–≤–∂–∏–Ω–∞ —Ç–µ–∫—Å—Ç—É –Ω–µ –±—ñ–ª—å—à–µ 120 —Å–ª—ñ–≤.`;
    return generateContent(prompt, 'Tarot Analysis');
}

async function publishSeriousHoroscope() {
    console.log('--- –ù–∞—á–∏–Ω–∞–µ—Ç—Å—è –ø—É–±–ª–∏–∫–∞—Ü–∏—è –°–ï–†–¨–ï–ó–ù–û–ì–û –≥–æ—Ä–æ—Å–∫–æ–ø–∞ ---');
    const today = new Date();
    const tomorrow = new Date(today.getTime() + (24 * 60 * 60 * 1000));
    const dateString = `${tomorrow.getDate()} ${getMonthNameUa(tomorrow)}`;
    let message = `*–ì–æ—Ä–æ—Å–∫–æ–ø –Ω–∞ –∑–∞–≤—Ç—Ä–∞ ‚ú® ${dateString}*\n\n`;

    for (const sign of ZODIAC_SIGNS) {
        console.log(`‚è≥ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–µ—Ä—å–µ–∑–Ω–æ–≥–æ –≥–æ—Ä–æ—Å–∫–æ–ø–∞ –¥–ª—è ${sign.name}...`);
        const text = await generateHoroscope(sign.name, 'serious', '–∑–∞–≤—Ç—Ä–∞');
        message += `${sign.emoji} *${sign.name}*\n${text}\n\n`;
        await new Promise(r => setTimeout(r, 3000));
    }

    message += `[–ö–æ–¥ –î–æ–ª—ñüìå](${TELEGRAM_CONFIG.CHANNEL_LINK})\n`;
    await publishPost(message, '–°–µ—Ä–π–æ–∑–Ω–∏–π –≥–æ—Ä–æ—Å–∫–æ–ø');
}

async function publishFunnyHoroscope() {
    console.log('--- –ù–∞—á–∏–Ω–∞–µ—Ç—Å—è –ø—É–±–ª–∏–∫–∞—Ü–∏—è –ö–£–ú–ï–î–ù–û–ì–û –≥–æ—Ä–æ—Å–∫–æ–ø–∞ ---');
    const today = new Date();
    const dateString = `${today.getDate()} ${getMonthNameUa(today)}`;
    let message = `*–ö—É–º–µ–¥–Ω–∏–π –≥–æ—Ä–æ—Å–∫–æ–ø –Ω–∞ —Å—å–æ–≥–æ–¥–Ω—ñ ‚ú® ${dateString}*\n\n`;

    for (const sign of ZODIAC_SIGNS) {
        console.log(`‚è≥ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫—É–º–µ–¥–Ω–æ–≥–æ –≥–æ—Ä–æ—Å–∫–æ–ø–∞ –¥–ª—è ${sign.name}...`);
        const text = await generateHoroscope(sign.name, 'funny', '—Å—å–æ–≥–æ–¥–Ω—ñ');
        message += `${sign.emoji} *${sign.name}* - ${text}\n\n`;
        await new Promise(r => setTimeout(r, 3000));
    }

    message += `[–ö–æ–¥ –î–æ–ª—ñüìå](${TELEGRAM_CONFIG.CHANNEL_LINK})\n`;
    await publishPost(message, '–ö—É–º–µ–¥–Ω–∏–π –≥–æ—Ä–æ—Å–∫–æ–ø');
}


async function publishTarotReading() {
    console.log('--- –ù–∞—á–∏–Ω–∞–µ—Ç—Å—è –ø—É–±–ª–∏–∫–∞—Ü–∏—è –ö–ê–†–¢–´ –î–ù–Ø –¢–ê–†–û ---');
    const today = new Date();
    const dateString = `${today.getDate()} ${getMonthNameUa(today)}`;

    const tarotText = await generateTarotReading('—Å—å–æ–≥–æ–¥–Ω—ñ');

    let message = `*–ö–∞—Ä—Ç–∞ –î–Ω—è –¢–∞—Ä–æ üîÆ ${dateString}*\n\n`;
    message += `${tarotText}\n\n`;
    message += `[–ö–æ–¥ –î–æ–ª—ñüìå](${TELEGRAM_CONFIG.CHANNEL_LINK})\n`;

    await publishPost(message, '–ö–∞—Ä—Ç–∞ –î–Ω—è –¢–∞—Ä–æ');
}

async function publishCompatibilityReading() {
    console.log('--- –ù–∞—á–∏–Ω–∞–µ—Ç—Å—è –ø—É–±–ª–∏–∫–∞—Ü–∏—è –ì–û–†–û–°–ö–û–ü–ê –°–£–ú–Ü–°–ù–û–°–¢–Ü ---');

    let sign1, sign2;
    do {
        sign1 = ZODIAC_SIGNS[Math.floor(Math.random() * ZODIAC_SIGNS.length)];
        sign2 = ZODIAC_SIGNS[Math.floor(Math.random() * ZODIAC_SIGNS.length)];
    } while (sign1.name === sign2.name);

    const compatibilityText = await generateCompatibilityReading(sign1.name, sign2.name);

    let message = `*–ì–æ—Ä–æ—Å–∫–æ–ø —Å—É–º—ñ—Å–Ω–æ—Å—Ç—ñ üíñ ${sign1.emoji} ${sign1.name} & ${sign2.emoji} ${sign2.name}*\n\n`;
    message += `${compatibilityText}\n\n`;
    message += `[–ö–æ–¥ –î–æ–ª—ñüìå](${TELEGRAM_CONFIG.CHANNEL_LINK})\n`;

    await publishPost(message, '–ì–æ—Ä–æ—Å–∫–æ–ø —Å—É–º—ñ—Å–Ω–æ—Å—Ç—ñ');
}

async function publishWeeklyHoroscope() {
    console.log('--- –ù–∞—á–∏–Ω–∞–µ—Ç—Å—è –ø—É–±–ª–∏–∫–∞—Ü–∏—è –ï–ñ–ï–ù–ï–î–ï–õ–¨–ù–û–ì–û –≥–æ—Ä–æ—Å–∫–æ–ø–∞ ---');

    const dateString = calculateWeekRange(new Date());
    let message = `*–©–æ —á–µ–∫–∞—î –Ω–∞ —Ç–∏–∂–Ω—ñ? ‚ú® ${dateString}*\n\n`;

    for (const sign of ZODIAC_SIGNS) {
        console.log(`‚è≥ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –µ–∂–µ–Ω–µ–¥–µ–ª—å–Ω–æ–≥–æ –≥–æ—Ä–æ—Å–∫–æ–ø–∞ –¥–ª—è ${sign.name}...`);
        const text = await generateWeeklyHoroscopeReading(sign.name);
        message += `${sign.emoji} *${sign.name}*\n${text}\n\n`;
        await new Promise(r => setTimeout(r, 3000));
    }

    message += `[–ö–æ–¥ –î–æ–ª—ñüìå](${TELEGRAM_CONFIG.CHANNEL_LINK})\n`;
    await publishPost(message, '–ï–∂–µ–Ω–µ–¥–µ–ª—å–Ω—ã–π –≥–æ—Ä–æ—Å–∫–æ–ø');
}

async function publishNumerologyReading() {
    console.log('--- –ù–∞—á–∏–Ω–∞–µ—Ç—Å—è –ø—É–±–ª–∏–∫–∞—Ü–∏—è –ù–£–ú–ï–†–û–õ–û–ì–ò–ò –î–ù–Ø ---');
    const today = new Date();
    const dateStringUa = `${today.getDate()} ${getMonthNameUa(today)}`;

    const number = calculateLifePathNumber(today);
    const numerologyText = await generateNumerologyReading(number, dateStringUa);

    let message = `*–ù—É–º–µ—Ä–æ–ª–æ–≥—ñ—è –î–Ω—è üî¢ ${dateStringUa}*\n\n`;
    message += `*–í–∞—à–µ —á–∏—Å–ª–æ –¥–Ω—è: ${number}*\n\n`;
    message += `${numerologyText}\n\n`;
    message += `[–ö–æ–¥ –î–æ–ª—ñüìå](${TELEGRAM_CONFIG.CHANNEL_LINK})\n`;

    await publishPost(message, '–ù—É–º–µ—Ä–æ–ª–æ–≥—ñ—è –î–Ω—è');
}

async function publishDailyWish() {
    console.log('--- –ù–∞—á–∏–Ω–∞–µ—Ç—Å—è –ø—É–±–ª–∏–∫–∞—Ü–∏—è –ü–û–ë–ê–ñ–ê–ù–ù–Ø –ù–ê –î–ï–ù–¨ ---');
    const today = new Date();
    const dateStringUa = `${today.getDate()} ${getMonthNameUa(today)}`;

    const wishText = await generateDailyWish(dateStringUa);

    let message = `*–î–æ–±—Ä–æ–≥–æ —Ä–∞–Ω–∫—É! ‚òï –ü–æ–±–∞–∂–∞–Ω–Ω—è –Ω–∞ ${dateStringUa}*\n\n`;
    message += `${wishText}\n\n`;
    message += `[–ö–æ–¥ –î–æ–ª—ñüìå](${TELEGRAM_CONFIG.CHANNEL_LINK})\n`;

    await publishPost(message, '–ü–æ–±–∞–∂–∞–Ω–Ω—è –Ω–∞ –î–µ–Ω—å');
}

async function publishDailyTarotAnalysis() {
    console.log('--- –ù–∞—á–∏–Ω–∞–µ—Ç—Å—è –ø—É–±–ª–∏–∫–∞—Ü–∏—è –©–û–î–ï–ù–ù–û–ì–û –†–û–ó–ë–û–†–£ –¢–ê–†–û ---');
    const today = new Date();
    const dateStringUa = `${today.getDate()} ${getMonthNameUa(today)}`;

    const analysisText = await generateDailyTarotAnalysis('—Å—å–æ–≥–æ–¥–Ω—ñ—à–Ω—ñ–π –≤–µ—á—ñ—Ä');

    let message = `*–†–æ–∑–±—ñ—Ä –¢–∞—Ä–æ –Ω–∞ –í–µ—á—ñ—Ä üÉè ${dateStringUa}*\n\n`;
    message += `${analysisText}\n\n`;
    message += `[–ö–æ–¥ –î–æ–ª—ñüìå](${TELEGRAM_CONFIG.CHANNEL_LINK})\n`;

    await publishPost(message, '–©–æ–¥–µ–Ω–Ω–∏–π –†–æ–∑–±—ñ—Ä –¢–∞—Ä–æ');
}

cron.schedule('0 21 * * *', publishDailyTarotAnalysis, { timezone: TIMEZONE });
console.log(`üóìÔ∏è CRON (–†–æ–∑–±—ñ—Ä –¢–∞—Ä–æ) –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –Ω–∞ 21:00 —â–æ–¥–µ–Ω–Ω–æ (${TIMEZONE}).`);

cron.schedule('0 7 * * *', publishDailyWish, { timezone: TIMEZONE });
console.log(`üóìÔ∏è CRON (–ü–æ–±–∞–∂–∞–Ω–Ω—è) –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –Ω–∞ 07:00 —â–æ–¥–µ–Ω–Ω–æ (${TIMEZONE}).`);

cron.schedule('0 18 * * *', publishSeriousHoroscope, { timezone: TIMEZONE });
console.log(`üóìÔ∏è CRON (–°–µ—Ä–π–æ–∑–Ω–∏–π) –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –Ω–∞ 18:00 (${TIMEZONE}).`);

cron.schedule('0 12 * * *', publishFunnyHoroscope, { timezone: TIMEZONE });
console.log(`üóìÔ∏è CRON (–ö—É–º–µ–¥–Ω–∏–π) –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –Ω–∞ 12:00 (${TIMEZONE}).`);

cron.schedule('0 10 * * *', publishTarotReading, { timezone: TIMEZONE });
console.log(`üóìÔ∏è CRON (–¢–∞—Ä–æ) –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –Ω–∞ 10:00 (${TIMEZONE}).`);

cron.schedule('0 20 * * 5', publishCompatibilityReading, { timezone: TIMEZONE });
console.log(`üóìÔ∏è CRON (–°—É–º—ñ—Å–Ω—ñ—Å—Ç—å) –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –Ω–∞ 20:00 —â–æ–ø\'—è—Ç–Ω–∏—Ü—ñ (${TIMEZONE}).`);

cron.schedule('0 9 * * 1', publishWeeklyHoroscope, { timezone: TIMEZONE });
console.log(`üóìÔ∏è CRON (–¢–∏–∂–¥–µ–Ω—å) –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –Ω–∞ 09:00 —â–æ–ø–æ–Ω–µ–¥—ñ–ª–∫–∞ (${TIMEZONE}).`);

cron.schedule('0 8 * * *', publishNumerologyReading, { timezone: TIMEZONE });
console.log(`üóìÔ∏è CRON (–ù—É–º–µ—Ä–æ–ª–æ–≥—ñ—è) –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –Ω–∞ 08:00 —â–æ–¥–µ–Ω–Ω–æ (${TIMEZONE}).`);

bot.start(ctx => ctx.reply('–ü—Ä–∏–≤—ñ—Ç üåô –Ø –±–æ—Ç-–∞—Å—Ç—Ä–æ–ª–æ–≥ Gemini, –ø—É–±–ª—ñ–∫—É—é –≥–æ—Ä–æ—Å–∫–æ–ø–∏ –∫–æ–∂–µ–Ω –¥–µ–Ω—å ü™ê'));

async function handleTestCommand(ctx, publishFunction, postName) {
    ctx.reply(`üöÄ –¢–µ—Å—Ç–æ–≤–∞ –ø—É–±–ª—ñ–∫–∞—Ü—ñ—è (${postName}) –∑–∞–ø—É—â–µ–Ω–∞ —É —Ñ–æ–Ω–æ–≤–æ–º—É —Ä–µ–∂–∏–º—ñ. –¶–µ –∑–∞–π–º–µ —á–∞—Å.`);
    const targetChatId = ctx.chat.id;

    publishFunction()
        .then(() => {
            bot.telegram.sendMessage(targetChatId, `‚úÖ –¢–µ—Å—Ç–æ–≤–∞ –ø—É–±–ª—ñ–∫–∞—Ü—ñ—è (${postName}) –∑–∞–≤–µ—Ä—à–µ–Ω–∞! –ü–µ—Ä–µ–≤—ñ—Ä—Ç–µ –∫–∞–Ω–∞–ª.`, { reply_to_message_id: ctx.message.message_id });
        })
        .catch((err) => {
            console.error(`‚ö†Ô∏è –ö—Ä–∏—Ç–∏—á–Ω–∞ –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–æ–≤—ñ–π –ø—É–±–ª—ñ–∫–∞—Ü—ñ—ó (${postName}):`, err);
            bot.telegram.sendMessage(targetChatId, `‚ö†Ô∏è –ö—Ä–∏—Ç–∏—á–Ω–∞ –ø–æ–º–∏–ª–∫–∞: ${err.message}. –ü–æ–¥—Ä–æ–±–∏—Ü—ñ —É –∫–æ–Ω—Å–æ–ª—ñ.`, { reply_to_message_id: ctx.message.message_id });
        });
}

bot.command('test', ctx => handleTestCommand(ctx, publishSeriousHoroscope, 'Serious'));
bot.command('humor', ctx => handleTestCommand(ctx, publishFunnyHoroscope, 'Funny'));
bot.command('taro', ctx => handleTestCommand(ctx, publishTarotReading, 'Tarot'));
bot.command('match', ctx => handleTestCommand(ctx, publishCompatibilityReading, '–°—É–º—ñ—Å–Ω—ñ—Å—Ç—å'));
bot.command('week', ctx => handleTestCommand(ctx, publishWeeklyHoroscope, '–¢–∏–∂–¥–µ–Ω—å'));
bot.command('number', ctx => handleTestCommand(ctx, publishNumerologyReading, '–ù—É–º–µ—Ä–æ–ª–æ–≥—ñ—è –î–Ω—è'));
bot.command('wish', ctx => handleTestCommand(ctx, publishDailyWish, '–ü–æ–±–∞–∂–∞–Ω–Ω—è –î–Ω—è'));
bot.command('tarot_analysis', ctx => handleTestCommand(ctx, publishDailyTarotAnalysis, '–†–æ–∑–±—ñ—Ä –¢–∞—Ä–æ'));


bot.launch();
console.log('üåü Gemini –±–æ—Ç –∑–∞–ø—É—â–µ–Ω —ñ –æ—á—ñ–∫—É—î —Ä–æ–∑–∫–ª–∞–¥—É');

process.once('SIGINT', () => bot.stop('SIGINT'));
process.once('SIGTERM', () => bot.stop('SIGTERM'));