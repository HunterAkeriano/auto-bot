import dotenv from 'dotenv';
import fs from 'fs';
import path from 'path';
import { Telegraf, Markup } from 'telegraf';
import cron from 'node-cron';
import { GoogleGenerativeAI } from '@google/generative-ai';

dotenv.config();

const TELEGRAM_CONFIG = {
    ADMIN_ID: process.env.ADMIN_ID,
    CHANNEL_CHAT_ID: process.env.CHANNEL_CHAT_ID,
    CHANNEL_LINK: process.env.CHANNEL_LINK,
    BOT_TOKEN: process.env.TELEGRAM_BOT_TOKEN
};

const adminMessageMode = {};

const GEMINI_CONFIG = {
    API_KEY: process.env.GEMINI_API_KEY,
    MODEL: 'gemini-2.5-flash'
};

const ZODIAC_SIGNS = [
    { name: '–û–≤–µ–Ω', emoji: '‚ôàÔ∏è' },
    { name: '–¢–µ–ª–µ—Ü—å', emoji: '‚ôâÔ∏è' },
    { name: '–ë–ª–∏–∑–Ω—é–∫–∏', emoji: '‚ôäÔ∏è' },
    { name: '–†–∞–∫', emoji: '‚ôãÔ∏è' },
    { name: '–õ–µ–≤', emoji: '‚ôåÔ∏è' },
    { name: '–î—ñ–≤–∞', emoji: '‚ôçÔ∏è' },
    { name: '–¢–µ—Ä–µ–∑–∏', emoji: '‚ôéÔ∏èÔ∏è' },
    { name: '–°–∫–æ—Ä–ø—ñ–æ–Ω', emoji: '‚ôèÔ∏è' },
    { name: '–°—Ç—Ä—ñ–ª–µ—Ü—å', emoji: '‚ôêÔ∏è' },
    { name: '–ö–æ–∑–µ—Ä—ñ–≥', emoji: '‚ôëÔ∏è' },
    { name: '–í–æ–¥–æ–ª—ñ–π', emoji: '‚ôíÔ∏è' },
    { name: '–†–∏–±–∏', emoji: '‚ôìÔ∏è' }
];

const tarotEmojis = ['üîÆ', 'üÉè', 'üåô', '‚ú®', 'üåü', '‚ôæÔ∏è', 'üî•', 'üí´'];

if (
    !TELEGRAM_CONFIG.BOT_TOKEN ||
    !GEMINI_CONFIG.API_KEY ||
    !TELEGRAM_CONFIG.ADMIN_ID ||
    !TELEGRAM_CONFIG.CHANNEL_LINK ||
    !TELEGRAM_CONFIG.CHANNEL_CHAT_ID
) {
    console.error('‚ùå –ü–æ–º–∏–ª–∫–∞: –Ω–µ –∑–Ω–∞–π–¥–µ–Ω—ñ –≤—Å—ñ –Ω–µ–æ–±—Ö—ñ–¥–Ω—ñ –∑–º—ñ–Ω–Ω—ñ —Å–µ—Ä–µ–¥–æ–≤–∏—â–∞.');
    process.exit(1);
}

const bot = new Telegraf(TELEGRAM_CONFIG.BOT_TOKEN);
const genAI = new GoogleGenerativeAI(GEMINI_CONFIG.API_KEY);
const model = genAI.getGenerativeModel({ model: GEMINI_CONFIG.MODEL, generationConfig: {temperature: 0.9} });
const TIMEZONE = 'Europe/Kiev';

const TAROT_HISTORY_FILE = path.resolve('./tarot_history.json');
const USERS_FILE = path.resolve('./users_store.json');

const MAX_TAROT_CARDS = 78;
let usedTarotCardsHistory = [];
let usersStore = { users: {} };

if (fs.existsSync(TAROT_HISTORY_FILE)) {
    try { usedTarotCardsHistory = JSON.parse(fs.readFileSync(TAROT_HISTORY_FILE, 'utf-8')); } catch { usedTarotCardsHistory = []; }
} else {
    fs.writeFileSync(TAROT_HISTORY_FILE, JSON.stringify([], null, 2));
}

if (fs.existsSync(USERS_FILE)) {
    try { usersStore = JSON.parse(fs.readFileSync(USERS_FILE, 'utf-8')) || { users: {} }; } catch { usersStore = { users: {} }; }
} else {
    fs.writeFileSync(USERS_FILE, JSON.stringify({ users: {} }, null, 2));
}

function persistTarotHistory() {
    fs.writeFileSync(TAROT_HISTORY_FILE, JSON.stringify(usedTarotCardsHistory, null, 2));
}

function persistUsersStore() {
    fs.writeFileSync(USERS_FILE, JSON.stringify(usersStore, null, 2));
}

function getUserRecord(userId) {
    const key = String(userId);
    if (!usersStore.users[key]) {
        usersStore.users[key] = {
            lastDayTs: 0,
            lastWeekTs: 0,
            lastMonthTs: 0,
            profile: {}
        };
    }
    return usersStore.users[key];
}

function saveUsedTarotCard(generatedText) {
    const match = generatedText.match(/\*([^*]+)\*/);
    if (!match || !match[1]) return;
    const cardName = match[1].trim();
    if (usedTarotCardsHistory.includes(cardName)) return;
    usedTarotCardsHistory.push(cardName);
    if (usedTarotCardsHistory.length > MAX_TAROT_CARDS) usedTarotCardsHistory = [];
    persistTarotHistory();
}

const GENERATION_TIMEOUT_MS = 350000;
const DAILY_LIMIT_MS = 24 * 60 * 60 * 1000;
const WEEKLY_LIMIT_MS = 7 * DAILY_LIMIT_MS;
const MONTHLY_LIMIT_MS = 30 * DAILY_LIMIT_MS;

const userGeneratingState = {};

const predictionReplyKeyboard = Markup.keyboard([
    ['–ù–∞ –¥–µ–Ω—å ‚òÄÔ∏è', '–ù–∞ —Ç–∏–∂–¥–µ–Ω—å üìÖ', '–ù–∞ –º—ñ—Å—è—Ü—å üåï']
]).resize();

function getMonthNameUa(date) {
    const monthNamesUa = [
        '—Å—ñ—á–Ω—è', '–ª—é—Ç–æ–≥–æ', '–±–µ—Ä–µ–∑–Ω—è', '–∫–≤—ñ—Ç–Ω—è', '—Ç—Ä–∞–≤–Ω—è', '—á–µ—Ä–≤–Ω—è',
        '–ª–∏–ø–Ω—è', '—Å–µ—Ä–ø–Ω—è', '–≤–µ—Ä–µ—Å–Ω—è', '–∂–æ–≤—Ç–Ω—è', '–ª–∏—Å—Ç–æ–ø–∞–¥–∞', '–≥—Ä—É–¥–Ω—è'
    ];
    return monthNamesUa[date.getMonth()];
}

function calculateWeekRange(today) {
    const currentDayOfWeek = today.getDay();
    const monday = new Date(today);
    monday.setDate(today.getDate() - (currentDayOfWeek === 0 ? 6 : currentDayOfWeek - 1));
    const startWeek = `${monday.getDate()} ${getMonthNameUa(monday)}`;
    const sunday = new Date(monday);
    sunday.setDate(monday.getDate() + 6);
    const endWeek = `${sunday.getDate()} ${getMonthNameUa(sunday)}`;
    return `${startWeek} ‚Äî ${endWeek}`;
}

function calculateLifePathNumber(date) {
    const day = date.getDate().toString().padStart(2, '0');
    const month = (date.getMonth() + 1).toString().padStart(2, '0');
    const year = date.getFullYear().toString();
    const fullDate = `${day}${month}${year}`;
    let sum = 0;
    for (let i = 0; i < fullDate.length; i++) sum += parseInt(fullDate[i], 10);
    while (sum > 9 && sum !== 11 && sum !== 22) {
        sum = sum.toString().split('').reduce((acc, d) => acc + parseInt(d, 10), 0);
    }
    return sum;
}

function formatTarotCardBold(text) {
    const randomEmoji = tarotEmojis[Math.floor(Math.random() * tarotEmojis.length)];
    return text.replace(/\*([^*]+)\*/, (_, card) => `*${randomEmoji} ${card.trim()}*`);
}

function convertToHtml(text) {
    if (!text) return '';
    let htmlText = text
        .replace(/&/g, '&amp;')
        .replace(/</g, '&lt;')
        .replace(/>/g, '&gt;')
        .replace(/\*\*([^*]+)\*\*/g, '<b>$1</b>')
        .replace(/\*([^*]+)\*/g, '<b>$1</b>')
        .replace(/\\-/g, '-')
        .replace(/([\r\n]{2,})/g, '\n\n');
    return htmlText;
}

function sanitizeUserMarkdown(text) {
    if (!text) return '';
    const markdownV2ReservedChars = /([_\[\]\(\)~`>#+\-=|{}.!\\/])/g;
    return text.replace(markdownV2ReservedChars, '\\$1').replace(/([\r\n]{2,})/g, '\n\n');
}

async function publishPost(rawMessage, postName) {
    const htmlMessage = convertToHtml(rawMessage);
    const finalLinkHtml = `<a href="${TELEGRAM_CONFIG.CHANNEL_LINK}">–ö–æ–¥ –î–æ–ª—ñüìå</a>\n`;
    const finalMessage = htmlMessage + finalLinkHtml;
    await bot.telegram.sendMessage(TELEGRAM_CONFIG.CHANNEL_CHAT_ID, finalMessage, {
        parse_mode: 'HTML',
        disable_web_page_preview: true
    });
    console.log(`‚úÖ ${postName} –æ–ø—É–±–ª—ñ–∫–æ–≤–∞–Ω–æ`);
}

async function generateContent(prompt, sign = 'General') {
    const MAX_RETRIES = 5;
    const BASE_RETRY_DELAY = 5000;
    const REQUEST_TIMEOUT = 120000;
    for (let attempt = 1; attempt <= MAX_RETRIES; attempt++) {
        try {
            const result = await model.generateContent(prompt, { requestOptions: { timeout: REQUEST_TIMEOUT } });
            return result.response.text().trim().replace(/[\r\n]{2,}/g, '\n');
        } catch (error) {
            console.error(`[${sign}] –ü–æ–º–∏–ª–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü—ñ—ó (${attempt}/${MAX_RETRIES}): ${error.message}`);
            if (attempt === MAX_RETRIES) return '‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è –∑–≥–µ–Ω–µ—Ä—É–≤–∞—Ç–∏ –≤–º—ñ—Å—Ç.';
            const delay = BASE_RETRY_DELAY * Math.pow(2, attempt - 1);
            await new Promise(r => setTimeout(r, delay));
        }
    }
}

async function generateFastContent(prompt, sign = 'UserRequest') {
    const MAX_RETRIES = 2;
    const BASE_RETRY_DELAY = 3000;
    const REQUEST_TIMEOUT = 80000;
    for (let attempt = 1; attempt <= MAX_RETRIES; attempt++) {
        try {
            const result = await model.generateContent(prompt, { requestOptions: { timeout: REQUEST_TIMEOUT } });
            return result.response.text().trim().replace(/[\r\n]{2,}/g, '\n');
        } catch (error) {
            console.error(`[${sign}] –ü–æ–º–∏–ª–∫–∞ —à–≤–∏–¥–∫–æ—ó –≥–µ–Ω–µ—Ä–∞—Ü—ñ—ó (${attempt}/${MAX_RETRIES}): ${error.message}`);
            if (attempt === MAX_RETRIES) throw new Error('Generation failed after max retries.');
            const delay = BASE_RETRY_DELAY * attempt;
            await new Promise(r => setTimeout(r, delay));
        }
    }
}

async function generatePersonalTarotWeekly() {
    const prompt = `–í–∏–±–µ—Ä–∏ –¢–†–ò –≤–∏–ø–∞–¥–∫–æ–≤—ñ –∫–∞—Ä—Ç–∏ –¢–∞—Ä–æ –¥–ª—è —ñ–Ω–¥–∏–≤—ñ–¥—É–∞–ª—å–Ω–æ–≥–æ –ø–µ—Ä–µ–¥–±–∞—á–µ–Ω–Ω—è –Ω–∞ —Ç–∏–∂–¥–µ–Ω—å. –§–æ—Ä–º–∞—Ç—É–π –Ω–∞–∑–≤–∏ —è–∫ *[–ù–∞–∑–≤–∞ –ö–∞—Ä—Ç–∏]*. –ü–∏—à–∏ –∑ –µ–º–æ—Ü—ñ–π–Ω–æ—é –≥–ª–∏–±–∏–Ω–æ—é, –¥–æ–ø—É—Å–∫–∞—é—á–∏ —Ç—ñ–Ω—ñ, —Å—É–º–Ω—ñ–≤–∏, –Ω–µ–≤–∏–∑–Ω–∞—á–µ–Ω—ñ—Å—Ç—å.
–ù–µ—Ö–∞–π –ø—Ä–æ–≥–Ω–æ–∑ –±—É–¥–µ —â–∏—Ä–∏–º, –Ω–µ –ª–∏—à–µ –ø–æ–∑–∏—Ç–∏–≤–Ω–∏–º. –ö–æ—Ä–æ—Ç–∫–æ –æ–ø–∏—à–∏ –ø–æ—á–∞—Ç–æ–∫, —Å–µ—Ä–µ–¥–∏–Ω—É —ñ –∫—ñ–Ω–µ—Ü—å —Ç–∏–∂–Ω—è. –î–æ 150 —Å–ª—ñ–≤.`;
    const result = await generateFastContent(prompt, 'Personal Tarot Weekly');
    const formatted = formatTarotCardBold(result);
    return `‚ú® *–í–∞—à–µ —ñ–Ω–¥–∏–≤—ñ–¥—É–∞–ª—å–Ω–µ –ø–µ—Ä–µ–¥–±–∞—á–µ–Ω–Ω—è –¢–∞—Ä–æ –Ω–∞ —Ç–∏–∂–¥–µ–Ω—å* ‚ú®\n\n${formatted}`;
}

async function generatePersonalTarotMonthly() {
    const prompt = `–í–∏–±–µ—Ä–∏ –û–î–ù–£ –∫–ª—é—á–æ–≤—É –∫–∞—Ä—Ç—É –¢–∞—Ä–æ –¥–ª—è —ñ–Ω–¥–∏–≤—ñ–¥—É–∞–ª—å–Ω–æ–≥–æ –ø–µ—Ä–µ–¥–±–∞—á–µ–Ω–Ω—è –Ω–∞ –º—ñ—Å—è—Ü—å. –§–æ—Ä–º–∞—Ç—É–π –Ω–∞–∑–≤—É —è–∫ *[–ù–∞–∑–≤–∞ –ö–∞—Ä—Ç–∏]*. –ü–∏—à–∏ –∑ –µ–º–æ—Ü—ñ–π–Ω–æ—é –≥–ª–∏–±–∏–Ω–æ—é, –¥–æ–ø—É—Å–∫–∞—é—á–∏ —Ç—ñ–Ω—ñ, —Å—É–º–Ω—ñ–≤–∏, –Ω–µ–≤–∏–∑–Ω–∞—á–µ–Ω—ñ—Å—Ç—å.
–ù–µ—Ö–∞–π –ø—Ä–æ–≥–Ω–æ–∑ –±—É–¥–µ —â–∏—Ä–∏–º, –Ω–µ –ª–∏—à–µ –ø–æ–∑–∏—Ç–∏–≤–Ω–∏–º.. –î–æ 200 —Å–ª—ñ–≤.`;
    const result = await generateFastContent(prompt, 'Personal Tarot Monthly');
    const formatted = formatTarotCardBold(result);
    return `‚ú® *–í–∞—à–µ —ñ–Ω–¥–∏–≤—ñ–¥—É–∞–ª—å–Ω–µ –ø–µ—Ä–µ–¥–±–∞—á–µ–Ω–Ω—è –¢–∞—Ä–æ –Ω–∞ –º—ñ—Å—è—Ü—å* ‚ú®\n\n${formatted}`;
}

async function generatePersonalTarotReading() {
    const prompt = `–í–∏–±–µ—Ä–∏ –æ–¥–Ω—É –∫–∞—Ä—Ç—É –∑ –ø–æ–≤–Ω–æ—ó –∫–æ–ª–æ–¥–∏ –¢–∞—Ä–æ –¥–ª—è —ñ–Ω–¥–∏–≤—ñ–¥—É–∞–ª—å–Ω–æ–≥–æ –ø–µ—Ä–µ–¥–±–∞—á–µ–Ω–Ω—è –Ω–∞ –¥–µ–Ω—å. –§–æ—Ä–º–∞—Ç—É–π –Ω–∞–∑–≤—É —è–∫ *[–ù–∞–∑–≤–∞ –ö–∞—Ä—Ç–∏]*. –ü–∏—à–∏ –∑ –µ–º–æ—Ü—ñ–π–Ω–æ—é –≥–ª–∏–±–∏–Ω–æ—é, –¥–æ–ø—É—Å–∫–∞—é—á–∏ —Ç—ñ–Ω—ñ, —Å—É–º–Ω—ñ–≤–∏, –Ω–µ–≤–∏–∑–Ω–∞—á–µ–Ω—ñ—Å—Ç—å.
–ù–µ—Ö–∞–π –ø—Ä–æ–≥–Ω–æ–∑ –±—É–¥–µ —â–∏—Ä–∏–º, –Ω–µ –ª–∏—à–µ –ø–æ–∑–∏—Ç–∏–≤–Ω–∏–º., –ø–æ—Ä–∞–¥–∞. –î–æ 100 —Å–ª—ñ–≤.`;
    const result = await generateFastContent(prompt, 'Personal Tarot Reading');
    const formatted = formatTarotCardBold(result);
    return `‚ú® *–í–∞—à–µ —ñ–Ω–¥–∏–≤—ñ–¥—É–∞–ª—å–Ω–µ –ø–µ—Ä–µ–¥–±–∞—á–µ–Ω–Ω—è –¢–∞—Ä–æ –Ω–∞ –¥–µ–Ω—å* ‚ú®\n\n${formatted}`;
}

bot.use(async (ctx, next) => {
    const userId = ctx.from?.id;
    if (!userId) return next();
    if (userGeneratingState[userId]) {
        const replyMessage = sanitizeUserMarkdown('‚è≥ *–í–∞—à –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–∏–π —Ä–æ–∑–∫–ª–∞–¥ –≤–∂–µ –≥–µ–Ω–µ—Ä—É—î—Ç—å—Å—è*\\. –ó–∞—á–µ–∫–∞–π—Ç–µ –∫—ñ–ª—å–∫–∞ —Å–µ–∫—É–Ω–¥.');
        await ctx.replyWithMarkdownV2(replyMessage, { reply_markup: predictionReplyKeyboard });
        return;
    }
    return next();
});

async function handleUserPredictionRequest(ctx, type, generatorFn, limitKey, limitMs) {
    const userId = String(ctx.from.id);
    const now = Date.now();
    const user = getUserRecord(userId);
    const lastTime = user[limitKey] || 0;
    const diff = limitMs - (now - lastTime);

    if (diff > 0) {
        const hours = Math.floor(diff / 3600000);
        const minutes = Math.floor((diff % 3600000) / 60000);
        return ctx.replyWithMarkdownV2(
            sanitizeUserMarkdown(`‚è≥ –í–∏ –≤–∂–µ –æ—Ç—Ä–∏–º—É–≤–∞–ª–∏ –ø—Ä–æ–≥–Ω–æ–∑ ${type}. –°–ø—Ä–æ–±—É–π—Ç–µ —á–µ—Ä–µ–∑ ${hours} –≥–æ–¥. ${minutes} —Ö–≤.`),
            { reply_markup: predictionReplyKeyboard }
        );
    }

    await ctx.reply('üîÆ –£ –∫–æ–∂–Ω–æ—ó –∫–∞—Ä—Ç–∏ —î –≥–æ–ª–æ—Å. –¢–≤–æ—è ‚Äî –≤–∂–µ —à–µ–ø–æ—á–µ...');
    await ctx.telegram.sendChatAction(ctx.chat.id, 'typing');

    const generationPromise = (async () => {
        const timeout = setTimeout(
            () => console.warn(`[Timeout] –ì–µ–Ω–µ—Ä–∞—Ü—ñ—è ${type} –ø–µ—Ä–µ–≤–∏—â–∏–ª–∞ ${GENERATION_TIMEOUT_MS}–º—Å`),
            GENERATION_TIMEOUT_MS
        );
        try {
            userGeneratingState[userId] = true;
            const rawText = await generatorFn();
            const channelLinkMarkdown = `\n\n[–ì–æ—Ä–æ—Å–∫–æ–ø–∏ —Ç–∞ —Ä–æ–∑–∫–ª–∞–¥–∏ —É –Ω–∞—à–æ–º—É –∫–∞–Ω–∞–ª—ñ: –ö–æ–¥ –î–æ–ª—ñüìå](${TELEGRAM_CONFIG.CHANNEL_LINK})`;
            const finalReplyText = sanitizeUserMarkdown(rawText) + channelLinkMarkdown;
            await ctx.replyWithMarkdownV2(finalReplyText, { reply_markup: predictionReplyKeyboard, disable_web_page_preview: true });
            user[limitKey] = now;
            persistUsersStore();
        } catch {
            await ctx.reply('‚ö†Ô∏è –°—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞. –°–ø—Ä–æ–±—É–π—Ç–µ –ø—ñ–∑–Ω—ñ—à–µ.', { reply_markup: predictionReplyKeyboard });
        } finally {
            clearTimeout(timeout);
            delete userGeneratingState[userId];
        }
    })();

    userGeneratingState[userId] = generationPromise;
}

const predictionKeyboard = Markup.inlineKeyboard([
    [Markup.button.callback('–ù–∞ –¥–µ–Ω—å ‚òÄÔ∏è', 'PREDICT_DAY')],
    [Markup.button.callback('–ù–∞ —Ç–∏–∂–¥–µ–Ω—å üìÖ', 'PREDICT_WEEK')],
    [Markup.button.callback('–ù–∞ –º—ñ—Å—è—Ü—å üåï', 'PREDICT_MONTH')]
]);

bot.action('PREDICT_DAY', ctx => handleUserPredictionRequest(ctx, '–ù–∞ –¥–µ–Ω—å', generatePersonalTarotReading, 'lastDayTs', DAILY_LIMIT_MS));
bot.action('PREDICT_WEEK', ctx => handleUserPredictionRequest(ctx, '–ù–∞ —Ç–∏–∂–¥–µ–Ω—å', generatePersonalTarotWeekly, 'lastWeekTs', WEEKLY_LIMIT_MS));
bot.action('PREDICT_MONTH', ctx => handleUserPredictionRequest(ctx, '–ù–∞ –º—ñ—Å—è—Ü—å', generatePersonalTarotMonthly, 'lastMonthTs', MONTHLY_LIMIT_MS));

bot.hears('–ù–∞ –¥–µ–Ω—å ‚òÄÔ∏è', ctx => handleUserPredictionRequest(ctx, '–ù–∞ –¥–µ–Ω—å', generatePersonalTarotReading, 'lastDayTs', DAILY_LIMIT_MS));
bot.hears('–ù–∞ —Ç–∏–∂–¥–µ–Ω—å üìÖ', ctx => handleUserPredictionRequest(ctx, '–ù–∞ —Ç–∏–∂–¥–µ–Ω—å', generatePersonalTarotWeekly, 'lastWeekTs', WEEKLY_LIMIT_MS));
bot.hears('–ù–∞ –º—ñ—Å—è—Ü—å üåï', ctx => handleUserPredictionRequest(ctx, '–ù–∞ –º—ñ—Å—è—Ü—å', generatePersonalTarotMonthly, 'lastMonthTs', MONTHLY_LIMIT_MS));

bot.start(ctx => {
    const welcomeMessage = sanitizeUserMarkdown(
        '–ü—Ä–∏–≤—ñ—Ç üåô –Ø –±–æ—Ç-–∞—Å—Ç—Ä–æ–ª–æ–≥ –ú–∏–∫–æ–ª–∞ –ë–æ–Ω–¥–∞—Ä—å, –ø—É–±–ª—ñ–∫—É—é –≥–æ—Ä–æ—Å–∫–æ–ø–∏ –∫–æ–∂–µ–Ω –¥–µ–Ω—å ü™ê\n\n' +
        '–û–±–µ—Ä—ñ—Ç—å —Å–≤—ñ–π *—ñ–Ω–¥–∏–≤—ñ–¥—É–∞–ª—å–Ω–∏–π —Ä–æ–∑–∫–ª–∞–¥ –¢–∞—Ä–æ* –∑–∞ –¥–æ–ø–æ–º–æ–≥–æ—é –∫–Ω–æ–ø–æ–∫ –Ω–∏–∂—á–µ, –∞–±–æ —Å–∫–æ—Ä–∏—Å—Ç–∞–π—Ç–µ—Å—è –∫–æ–º–∞–Ω–¥–æ—é:\n' +
        'üëâ /gadaniye'
    );
    ctx.replyWithMarkdownV2(welcomeMessage, { reply_markup: predictionReplyKeyboard });
});

async function generateHoroscope(sign, promptStyle, dayContext) {
    let basePrompt;
    const wordLimit = promptStyle === 'serious' ? 35 : 20;
    if (promptStyle === 'serious') {
        basePrompt = `–°–∫–ª–∞–¥–∏ —ñ–Ω—Ñ–æ—Ä–º–∞—Ç–∏–≤–Ω–∏–π, –Ω–µ–π—Ç—Ä–∞–ª—å–Ω–∏–π –ø—Ä–æ–≥–Ω–æ–∑ –Ω–∞ ${dayContext} –¥–ª—è –∑–Ω–∞–∫—É –∑–æ–¥—ñ–∞–∫—É ${sign} —É–∫—Ä–∞—ó–Ω—Å—å–∫–æ—é –º–æ–≤–æ—é. –ë–µ–∑ –Ω–∞–¥–º—ñ—Ä—É –µ–º–æ–¥–∑—ñ —Ç–∞ —Å–ª–µ–Ω–≥—É. –î–æ–≤–∂–∏–Ω–∞ –Ω–µ –±—ñ–ª—å—à–µ ${wordLimit} —Å–ª—ñ–≤.`;
    } else if (promptStyle === 'funny') {
        basePrompt = `–°–∫–ª–∞–¥–∏ –∫—É–º–µ–¥–Ω–∏–π, —ñ—Ä–æ–Ω—ñ—á–Ω–∏–π, –∫–æ—Ä–æ—Ç–∫–∏–π –ø—Ä–æ–≥–Ω–æ–∑ –Ω–∞ ${dayContext} –¥–ª—è –∑–Ω–∞–∫—É –∑–æ–¥—ñ–∞–∫—É ${sign} —É–∫—Ä–∞—ó–Ω—Å—å–∫–æ—é. –û–¥–Ω–µ –ª–∞–∫–æ–Ω—ñ—á–Ω–µ —Ä–µ—á–µ–Ω–Ω—è. –ù–µ –±—ñ–ª—å—à–µ ${wordLimit} —Å–ª—ñ–≤.`;
    } else {
        throw new Error('–ù–µ–≤—ñ–¥–æ–º–∏–π —Å—Ç–∏–ª—å –ø—Ä–æ–º–ø—Ç–∞');
    }
    return generateContent(basePrompt, sign);
}

async function generateTarotReading(dayContext) {
    const exclusionList = usedTarotCardsHistory.join(', ');
    const exclusion = exclusionList ? ` –ö–∞—Ä—Ç–∞ –ù–ï –ü–û–í–ò–ù–ù–ê –±—É—Ç–∏ –æ–¥–Ω—ñ—î—é –∑ —Ü–∏—Ö: ${exclusionList}.` : '';
    const prompt = `–í–∏–±–µ—Ä–∏ –æ–¥–Ω—É –∫–∞—Ä—Ç—É –∑ –ø–æ–≤–Ω–æ—ó –∫–æ–ª–æ–¥–∏ –¢–∞—Ä–æ (78 –∫–∞—Ä—Ç, –≤–∫–ª—é—á–Ω–æ –∑ –ú–æ–ª–æ–¥—à–∏–º–∏ –ê—Ä–∫–∞–Ω–∞–º–∏). –ù–∞–∑–≤–∏ —ó—ó —É–∫—Ä–∞—ó–Ω—Å—å–∫–æ—é —Ç–∞ –¥–∞–π –∫–æ—Ä–æ—Ç–∫–∏–π –ø–æ–∑–∏—Ç–∏–≤–Ω–∏–π –ø—Ä–æ–≥–Ω–æ–∑ –Ω–∞ ${dayContext}. –§–æ—Ä–º–∞—Ç: *[–ù–∞–∑–≤–∞ –ö–∞—Ä—Ç–∏]*. –û–ø–∏—Å —ñ –ø—Ä–æ–≥–Ω–æ–∑. –î–æ 70 —Å–ª—ñ–≤.${exclusion}`;
    const result = await generateContent(prompt, 'Tarot (78 cards)');
    saveUsedTarotCard(result);
    return result;
}

async function generateCompatibilityReading(sign1, sign2) {
    const prompt = `–°–∫–ª–∞–¥–∏ –¥–µ—Ç–∞–ª—å–Ω–∏–π, –ø–æ–∑–∏—Ç–∏–≤–Ω–∏–π –æ–ø–∏—Å —Å—É–º—ñ—Å–Ω–æ—Å—Ç—ñ –∑–Ω–∞–∫—ñ–≤ *${sign1}* —Ç–∞ *${sign2}* —É —Å—Ç–æ—Å—É–Ω–∫–∞—Ö. –í–∏–¥—ñ–ª–∏ —Å–∏–ª—å–Ω—ñ —Å—Ç–æ—Ä–æ–Ω–∏ –ø–∞—Ä–∏ —Ç–∞ –¥–∞–π –ø–æ—Ä–∞–¥—É. –î–æ 150 —Å–ª—ñ–≤.`;
    return generateContent(prompt, `Compatibility: ${sign1} & ${sign2}`);
}

async function generateWeeklyHoroscopeReading(sign) {
    const prompt = `–°–∫–ª–∞–¥–∏ —ñ–Ω—Ñ–æ—Ä–º–∞—Ç–∏–≤–Ω–∏–π –Ω–µ–π—Ç—Ä–∞–ª—å–Ω–∏–π –ø—Ä–æ–≥–Ω–æ–∑ –¥–ª—è –∑–Ω–∞–∫—É *${sign}* –Ω–∞ –ø–æ—Ç–æ—á–Ω–∏–π —Ç–∏–∂–¥–µ–Ω—å: —Ä–æ–±–æ—Ç–∞, —Ñ—ñ–Ω–∞–Ω—Å–∏, –æ—Å–æ–±–∏—Å—Ç–µ –∂–∏—Ç—Ç—è ‚Äî 1‚Äì2 —Ä–µ—á–µ–Ω–Ω—è. –î–æ 35 —Å–ª—ñ–≤.`;
    return generateContent(prompt, sign);
}

async function generateNumerologyReading(number, dateString) {
    const prompt = `–°–∫–ª–∞–¥–∏ –Ω–∞–¥–∏—Ö–∞—é—á–∏–π –ø—Ä–æ–≥–Ω–æ–∑ —É–∫—Ä–∞—ó–Ω—Å—å–∫–æ—é –º–æ–≤–æ—é –¥–ª—è *–ß–∏—Å–ª–∞ –î–Ω—è ${number}* –Ω–∞ –¥–∞—Ç—É ${dateString}. –û–ø–∏—à–∏ –∫–ª—é—á–æ–≤—ñ —Ç–µ–Ω–¥–µ–Ω—Ü—ñ—ó —Ç–∞ –ø–æ—Ä–∞–¥—É. –î–æ 80 —Å–ª—ñ–≤.`;
    return generateContent(prompt, `Numerology: ${number}`);
}

async function generateDailyWish(dateString) {
    const prompt = `–°–∫–ª–∞–¥–∏ –∫–æ—Ä–æ—Ç–∫–µ –ø–æ–∑–∏—Ç–∏–≤–Ω–µ *–ü–æ–±–∞–∂–∞–Ω–Ω—è –Ω–∞ ${dateString}* –∑ –µ–º–æ–¥–∑—ñ. –î–æ 25 —Å–ª—ñ–≤.`;
    return generateContent(prompt, 'Daily Wish');
}

async function generateDailyTarotAnalysis(dayContext) {
    const exclusionList = usedTarotCardsHistory.join(', ');
    const exclusion = exclusionList ? ` –ù–ï –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π –∫–∞—Ä—Ç—É –∑ –Ω–∞–∑–≤–æ—é –∑—ñ —Å–ø–∏—Å–∫—É: ${exclusionList}.` : '';
    const prompt = `–í–∏–±–µ—Ä–∏ –û–î–ù–£ –≤–∏–ø–∞–¥–∫–æ–≤—É –∫–∞—Ä—Ç—É –∑ –ø–æ–≤–Ω–æ—ó –∫–æ–ª–æ–¥–∏ –¢–∞—Ä–æ (78 –∫–∞—Ä—Ç). –ù–∞–∑–≤–∏ —ó—ó —Ç–∞ —Å—Ç–≤–æ—Ä–∏ –≥–ª–∏–±–æ–∫–∏–π "—Ä–æ–∑–±—ñ—Ä —Ç–∞—Ä–æ" –Ω–∞ ${dayContext}: –∫–ª—é—á–æ–≤–µ –∑–Ω–∞—á–µ–Ω–Ω—è, –ø—Å–∏—Ö–æ–ª–æ–≥—ñ—á–Ω–∞ –ø–æ—Ä–∞–¥–∞, –≤–ø–ª–∏–≤ –Ω–∞ –≤–µ—á—ñ—Ä. –§–æ—Ä–º–∞—Ç: *[–ù–∞–∑–≤–∞ –ö–∞—Ä—Ç–∏]*. –ü–æ—Ç—ñ–º –¥–µ—Ç–∞–ª—å–Ω–∏–π –∞–Ω–∞–ª—ñ–∑.${exclusion} –î–æ 120 —Å–ª—ñ–≤.`;
    const result = await generateContent(prompt, 'Tarot Analysis (78 cards)');
    saveUsedTarotCard(result);
    return result;
}

async function generateWithRetries(generatorFn, sign = 'Unknown') {
    let attempt = 0;
    const MAX_ATTEMPTS = 20;

    while (attempt < MAX_ATTEMPTS) {
        attempt++;
        try {
            console.log(`[${sign}] üîÑ –°–ø—Ä–æ–±–∞ –≥–µ–Ω–µ—Ä–∞—Ü—ñ—ó #${attempt}...`);
            const result = await generatorFn();

            if (result &&
                result !== '‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è –∑–≥–µ–Ω–µ—Ä—É–≤–∞—Ç–∏ –≤–º—ñ—Å—Ç.' &&
                result.trim().length > 10) {
                console.log(`[${sign}] ‚úÖ –£—Å–ø—ñ—à–Ω–æ –∑–≥–µ–Ω–µ—Ä–æ–≤–∞–Ω–æ –∑ —Å–ø—Ä–æ–±–∏ #${attempt}`);
                return result;
            }

            console.warn(`[${sign}] ‚ö†Ô∏è –°–ø—Ä–æ–±–∞ ${attempt}: –Ω–µ–≤–∞–ª—ñ–¥–Ω–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç, –ø–æ–≤—Ç–æ—Ä—é—é...`);
        } catch (error) {
            console.error(`[${sign}] ‚ùå –ü–æ–º–∏–ª–∫–∞ –Ω–∞ —Å–ø—Ä–æ–±—ñ ${attempt}:`, error.message);
        }

        const delay = Math.min(2000 + (attempt * 1000), 10000);
        console.log(`[${sign}] ‚è≥ –û—á—ñ–∫—É–≤–∞–Ω–Ω—è ${delay}–º—Å –ø–µ—Ä–µ–¥ –Ω–∞—Å—Ç—É–ø–Ω–æ—é —Å–ø—Ä–æ–±–æ—é...`);
        await new Promise(r => setTimeout(r, delay));
    }

    console.error(`[${sign}] ‚ùå –ù–ï –í–î–ê–õ–û–°–Ø –ó–ì–ï–ù–ï–†–£–í–ê–¢–ò –ø—ñ—Å–ª—è ${MAX_ATTEMPTS} —Å–ø—Ä–æ–±!`);
    return `–ó—ñ—Ä–∫–∏ —Å—å–æ–≥–æ–¥–Ω—ñ –º–æ–≤—á–∞—Ç—å –¥–ª—è —Ü—å–æ–≥–æ –∑–Ω–∞–∫—É. üåü`;
}

async function publishSeriousHoroscope() {
    const today = new Date();
    const tomorrow = new Date(today.getTime() + 24 * 60 * 60 * 1000);
    const dateString = `${tomorrow.getDate()} ${getMonthNameUa(tomorrow)}`;

    let message = `*–ì–æ—Ä–æ—Å–∫–æ–ø –Ω–∞ –∑–∞–≤—Ç—Ä–∞ üóìÔ∏è ${dateString}*\n\n`;

    for (const sign of ZODIAC_SIGNS) {
        console.log(`\nüîÆ –ü–æ—á–∏–Ω–∞—é –≥–µ–Ω–µ—Ä–∞—Ü—ñ—é –¥–ª—è ${sign.name}...`);
        const text = await generateWithRetries(
            () => generateHoroscope(sign.name, 'serious', '–∑–∞–≤—Ç—Ä–∞'),
            sign.name
        );
        message += `${sign.emoji} **${sign.name}**\n${text}\n\n`;
        await new Promise(r => setTimeout(r, 1500));
    }

    await publishPost(message, '–°–µ—Ä–π–æ–∑–Ω–∏–π –≥–æ—Ä–æ—Å–∫–æ–ø');
}

async function publishFunnyHoroscope() {
    const today = new Date();
    const dateString = `${today.getDate()} ${getMonthNameUa(today)}`;
    let message = `*–ö—É–º–µ–¥–Ω–∏–π –≥–æ—Ä–æ—Å–∫–æ–ø –Ω–∞ —Å—å–æ–≥–æ–¥–Ω—ñ üòÇ ${dateString}*\n\n`;
    for (const sign of ZODIAC_SIGNS) {
        const text = await generateHoroscope(sign.name, 'funny', '—Å—å–æ–≥–æ–¥–Ω—ñ');
        message += `${sign.emoji} *${sign.name}* - ${text}\n\n`;
        await new Promise(r => setTimeout(r, 3000));
    }
    await publishPost(message, '–ö—É–º–µ–¥–Ω–∏–π –≥–æ—Ä–æ—Å–∫–æ–ø');
}

async function publishTarotReading() {
    const today = new Date();
    const dateString = `${today.getDate()} ${getMonthNameUa(today)}`;
    const tarotText = await generateTarotReading('—Å—å–æ–≥–æ–¥–Ω—ñ');
    let message = `*–ö–∞—Ä—Ç–∞ –î–Ω—è –¢–∞—Ä–æ üîÆ‚ú® ${dateString}*\n\n${tarotText}\n\n`;
    await publishPost(message, '–ö–∞—Ä—Ç–∞ –î–Ω—è –¢–∞—Ä–æ');
}

async function publishCompatibilityReading() {
    let sign1, sign2;
    do {
        sign1 = ZODIAC_SIGNS[Math.floor(Math.random() * ZODIAC_SIGNS.length)];
        sign2 = ZODIAC_SIGNS[Math.floor(Math.random() * ZODIAC_SIGNS.length)];
    } while (sign1.name === sign2.name);
    const compatibilityText = await generateCompatibilityReading(sign1.name, sign2.name);
    let message = `*–ì–æ—Ä–æ—Å–∫–æ–ø —Å—É–º—ñ—Å–Ω–æ—Å—Ç—ñ ‚ù§Ô∏è ${sign1.emoji} ${sign1.name} & ${sign2.emoji} ${sign2.name}*\n\n${compatibilityText}\n\n`;
    await publishPost(message, '–ì–æ—Ä–æ—Å–∫–æ–ø —Å—É–º—ñ—Å–Ω–æ—Å—Ç—ñ');
}

async function publishWeeklyHoroscope() {
    const dateString = calculateWeekRange(new Date());
    let message = `*–©–æ —á–µ–∫–∞—î –Ω–∞ —Ü—å–æ–º—É —Ç–∏–∂–Ω—ñ? üóìÔ∏è ${dateString}*\n\n`;

    for (const sign of ZODIAC_SIGNS) {
        console.log(`\nüìÖ –ü–æ—á–∏–Ω–∞—é –≥–µ–Ω–µ—Ä–∞—Ü—ñ—é —Ç–∏–∂–Ω–µ–≤–æ–≥–æ –≥–æ—Ä–æ—Å–∫–æ–ø—É –¥–ª—è ${sign.name}...`);
        const text = await generateWithRetries(
            () => generateWeeklyHoroscopeReading(sign.name),
            sign.name
        );
        message += `${sign.emoji} *${sign.name}*\n${text}\n\n`;
        await new Promise(r => setTimeout(r, 2000));
    }

    await publishPost(message, '–©–æ—Ç–∏–∂–Ω–µ–≤–∏–π –≥–æ—Ä–æ—Å–∫–æ–ø');
}

async function publishNumerologyReading() {
    const today = new Date();
    const dateStringUa = `${today.getDate()} ${getMonthNameUa(today)}`;
    const number = calculateLifePathNumber(today);
    const numerologyText = await generateNumerologyReading(number, dateStringUa);
    let message = `*–ù—É–º–µ—Ä–æ–ª–æ–≥—ñ—è –î–Ω—è üî¢ ${dateStringUa}*\n\n*–í–∞—à–µ —á–∏—Å–ª–æ –¥–Ω—è: ${number}*\n\n${numerologyText}\n\n`;
    await publishPost(message, '–ù—É–º–µ—Ä–æ–ª–æ–≥—ñ—è –î–Ω—è');
}

async function publishDailyWish() {
    const today = new Date();
    const dateStringUa = `${today.getDate()} ${getMonthNameUa(today)}`;
    const wishText = await generateDailyWish(dateStringUa);
    let message = `*–î–æ–±—Ä–æ–≥–æ —Ä–∞–Ω–∫—É! ‚òï –ü–æ–±–∞–∂–∞–Ω–Ω—è –Ω–∞ ${dateStringUa}* ‚ú®\n\n${wishText}\n\n`;
    await publishPost(message, '–ü–æ–±–∞–∂–∞–Ω–Ω—è –Ω–∞ –î–µ–Ω—å');
}

async function publishDailyTarotAnalysis() {
    const today = new Date();
    const dateStringUa = `${today.getDate()} ${getMonthNameUa(today)}`;
    const analysisText = await generateDailyTarotAnalysis('—Å—å–æ–≥–æ–¥–Ω—ñ—à–Ω—ñ–π –≤–µ—á—ñ—Ä');
    let message = `*–†–æ–∑–±—ñ—Ä –ö–∞—Ä—Ç–∏ –¢–∞—Ä–æ –Ω–∞ –≤–µ—á—ñ—Ä üÉèüåô ${dateStringUa}*\n\n${analysisText}\n\n`;
    await publishPost(message, '–©–æ–¥–µ–Ω–Ω–∏–π –†–æ–∑–±—ñ—Ä –¢–∞—Ä–æ (–û–¥–Ω–∞ –ö–∞—Ä—Ç–∞)');
}

cron.schedule('0 19 * * *', publishDailyTarotAnalysis, { timezone: TIMEZONE });
console.log(`üóìÔ∏è CRON (–†–æ–∑–±—ñ—Ä –¢–∞—Ä–æ - –û–¥–Ω–∞ –ö–∞—Ä—Ç–∞) 19:00 (${TIMEZONE})`);
cron.schedule('0 7 * * *', publishDailyWish, { timezone: TIMEZONE });
console.log(`üóìÔ∏è CRON (–ü–æ–±–∞–∂–∞–Ω–Ω—è) 07:00 (${TIMEZONE})`);
cron.schedule('0 18 * * *', publishSeriousHoroscope, { timezone: TIMEZONE });
console.log(`üóìÔ∏è CRON (–°–µ—Ä–π–æ–∑–Ω–∏–π) 18:00 (${TIMEZONE})`);
cron.schedule('0 12 * * *', publishFunnyHoroscope, { timezone: TIMEZONE });
console.log(`üóìÔ∏è CRON (–ö—É–º–µ–¥–Ω–∏–π) 12:00 (${TIMEZONE})`);
cron.schedule('0 10 * * *', publishTarotReading, { timezone: TIMEZONE });
console.log(`üóìÔ∏è CRON (–¢–∞—Ä–æ) 10:00 (${TIMEZONE})`);
cron.schedule('0 20 * * 5', publishCompatibilityReading, { timezone: TIMEZONE });
console.log(`üóìÔ∏è CRON (–°—É–º—ñ—Å–Ω—ñ—Å—Ç—å) 20:00 —â–æ–ø'—è—Ç–Ω–∏—Ü—ñ (${TIMEZONE})`);
cron.schedule('0 9 * * 1', publishWeeklyHoroscope, { timezone: TIMEZONE });
console.log(`üóìÔ∏è CRON (–¢–∏–∂–¥–µ–Ω—å) 09:00 —â–æ–ø–æ–Ω–µ–¥—ñ–ª–∫–∞ (${TIMEZONE})`);
cron.schedule('0 8 * * *', publishNumerologyReading, { timezone: TIMEZONE });
console.log(`üóìÔ∏è CRON (–ù—É–º–µ—Ä–æ–ª–æ–≥—ñ—è) 08:00 (${TIMEZONE})`);

async function handleTestCommand(ctx, publishFunction, postName) {
    const userId = ctx.from.id.toString();
    if (userId !== TELEGRAM_CONFIG.ADMIN_ID.toString()) {
        return ctx.reply('üö´ –¶—è –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ –ª–∏—à–µ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä—É.');
    }
    await ctx.reply(`üöÄ –¢–µ—Å—Ç–æ–≤–∞ –ø—É–±–ª—ñ–∫–∞—Ü—ñ—è (${postName}) —Ä–æ–∑–ø–æ—á–∞—Ç–∞! –ó–∞—á–µ–∫–∞–π—Ç–µ –∫—ñ–ª—å–∫–∞ —Å–µ–∫—É–Ω–¥...`);
    try {
        await publishFunction();
        await ctx.reply(`‚úÖ –ü—É–±–ª—ñ–∫–∞—Ü—ñ—è "${postName}" –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —Ç–∞ –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–∞ —É –∫–∞–Ω–∞–ª!`);
    } catch (err) {
        console.error(`‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–æ–≤—ñ–π –ø—É–±–ª—ñ–∫–∞—Ü—ñ—ó (${postName}):`, err);
        await ctx.reply(`‚ö†Ô∏è –ü–æ–º–∏–ª–∫–∞: ${err.message}`);
    }
}

function resetAllData() {
    usedTarotCardsHistory = [];
    usersStore = { users: {} };

    fs.writeFileSync(TAROT_HISTORY_FILE, JSON.stringify([], null, 2));
    fs.writeFileSync(USERS_FILE, JSON.stringify({ users: {} }, null, 2));

    console.log('‚ôªÔ∏è –£—Å—ñ JSON-—Ñ–∞–π–ª–∏ –±—É–ª–æ —É—Å–ø—ñ—à–Ω–æ –æ—á–∏—â–µ–Ω–æ!');
    return true;
}



bot.command('test', ctx => handleTestCommand(ctx, publishSeriousHoroscope, 'Serious'));
bot.command('humor', ctx => handleTestCommand(ctx, publishFunnyHoroscope, 'Funny'));
bot.command('taro', ctx => handleTestCommand(ctx, publishTarotReading, 'Tarot'));
bot.command('match', ctx => handleTestCommand(ctx, publishCompatibilityReading, '–°—É–º—ñ—Å–Ω—ñ—Å—Ç—å'));
bot.command('week', ctx => handleTestCommand(ctx, publishWeeklyHoroscope, '–¢–∏–∂–¥–µ–Ω—å'));
bot.command('number', ctx => handleTestCommand(ctx, publishNumerologyReading, '–ù—É–º–µ—Ä–æ–ª–æ–≥—ñ—è –î–Ω—è'));
bot.command('wish', ctx => handleTestCommand(ctx, publishDailyWish, '–ü–æ–±–∞–∂–∞–Ω–Ω—è –î–Ω—è'));
bot.command('tarot_analysis', ctx => handleTestCommand(ctx, publishDailyTarotAnalysis, '–†–æ–∑–±—ñ—Ä –¢–∞—Ä–æ (–û–¥–Ω–∞ –ö–∞—Ä—Ç–∞)'));
bot.command('reset_all', async ctx => {
    const userId = ctx.from.id.toString();
    if (userId !== TELEGRAM_CONFIG.ADMIN_ID.toString()) {
        return ctx.reply('üö´ –¶—è –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ –ª–∏—à–µ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä—É.');
    }

    await ctx.reply('‚öôÔ∏è –ü–æ—á–∏–Ω–∞—é –ø–æ–≤–Ω–µ –æ—á–∏—â–µ–Ω–Ω—è —ñ—Å—Ç–æ—Ä—ñ—ó...');
    try {
        resetAllData();
        await ctx.reply('‚úÖ –í—Å—ñ —Ñ–∞–π–ª–∏ —ñ—Å—Ç–æ—Ä—ñ—ó (TAROT + USERS) —É—Å–ø—ñ—à–Ω–æ —Å–∫–∏–Ω—É—Ç—ñ!');
    } catch (err) {
        console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ —Å–∫–∏–¥–∞–Ω–Ω—ñ —ñ—Å—Ç–æ—Ä—ñ—ó:', err);
        await ctx.reply(`‚ö†Ô∏è –ü–æ–º–∏–ª–∫–∞: ${err.message}`);
    }
});

bot.command('gadaniye', async ctx => {
    const message = sanitizeUserMarkdown(`üîÆ *–û–±–µ—Ä—ñ—Ç—å —Ç–∏–ø –ø–µ—Ä–µ–¥–±–∞—á–µ–Ω–Ω—è –¢–∞—Ä–æ:*\n –ó–≤–µ—Ä–Ω—ñ—Ç—å —É–≤–∞–≥—É, –∫–æ–∂–µ–Ω —Ç–∏–ø –º–∞—î —Å–≤—ñ–π –ª—ñ–º—ñ—Ç —á–∞—Å—É.`);
    await ctx.replyWithMarkdownV2(message, predictionKeyboard);
});

bot.command('show_menu', async ctx => {
    const message = sanitizeUserMarkdown(`üîÆ *–ö–ª–∞–≤—ñ–∞—Ç—É—Ä–∞ –≤—ñ–¥–Ω–æ–≤–ª–µ–Ω–∞.* –û–±–µ—Ä—ñ—Ç—å –ø–æ—Ç—Ä—ñ–±–Ω–∏–π –ø—Ä–æ–≥–Ω–æ–∑ –Ω–∏–∂—á–µ:`);
    await ctx.replyWithMarkdownV2(message, { reply_markup: predictionReplyKeyboard });
});

bot.command('hide_menu', async ctx => {
    await ctx.reply('‚úÖ –ö–ª–∞–≤—ñ–∞—Ç—É—Ä—É –±—É–ª–æ –ø—Ä–∏—Ö–æ–≤–∞–Ω–æ. –ù–∞—Ç–∏—Å–Ω—ñ—Ç—å /start –∞–±–æ /show_menu, —â–æ–± —ó—ó –≤—ñ–¥–Ω–æ–≤–∏—Ç–∏.', Markup.removeKeyboard());
});

bot.command('reply', async ctx => {
    const userId = ctx.from.id.toString();
    if (userId !== TELEGRAM_CONFIG.ADMIN_ID.toString()) {
        return ctx.reply('üö´ –¶—è –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ –ª–∏—à–µ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä—É.');
    }

    const input = ctx.message.text.replace('/reply', '').trim();
    if (!input) {
        return ctx.reply('‚ùå –§–æ—Ä–º–∞—Ç: /reply <–ø–æ—Å–∏–ª–∞–Ω–Ω—è> <—Ç–µ–∫—Å—Ç –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ>\n\n–ü—Ä–∏–∫–ª–∞–¥:\n/reply https://t.me/c/2206913679/136833 —è –∑—Ä—è —á—Ç–æ–ª–∏ —Ç–µ–±–µ –Ω–∞ —Ç–∞—Ä–æ –≥–∞–¥–∞–ª?');
    }

    const urlMatch = input.match(/https:\/\/t\.me\/c\/(\d+)\/(\d+)/);
    if (!urlMatch) {
        return ctx.reply('‚ùå –ù–µ–≤—ñ—Ä–Ω–µ –ø–æ—Å–∏–ª–∞–Ω–Ω—è. –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π—Ç–µ —Ñ–æ—Ä–º–∞—Ç: https://t.me/c/CHAT_ID/MESSAGE_ID');
    }

    const chatId = `-100${urlMatch[1]}`;
    const messageId = urlMatch[2];
    const replyText = input.replace(urlMatch[0], '').trim();

    if (!replyText) {
        return ctx.reply('‚ùå –í–∏ –Ω–µ –≤–∫–∞–∑–∞–ª–∏ —Ç–µ–∫—Å—Ç –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ!');
    }

    try {
        await bot.telegram.sendMessage(chatId, replyText, {
            reply_to_message_id: parseInt(messageId)
        });
        await ctx.reply('‚úÖ –í—ñ–¥–ø–æ–≤—ñ–¥—å —É—Å–ø—ñ—à–Ω–æ –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–∞!');
    } catch (err) {
        console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –≤—ñ–¥–ø—Ä–∞–≤—Ü—ñ –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ:', err);
        await ctx.reply(`‚ö†Ô∏è –ü–æ–º–∏–ª–∫–∞: ${err.message}`);
    }
});

bot.command('text', async ctx => {
    const userId = ctx.from.id.toString();
    if (userId !== TELEGRAM_CONFIG.ADMIN_ID.toString()) {
        return ctx.reply('üö´ –¶—è –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ –ª–∏—à–µ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä—É.');
    }

    const input = ctx.message.text.replace('/text', '').trim();

    if (input) {
        try {
            await bot.telegram.sendMessage(TELEGRAM_CONFIG.CHANNEL_CHAT_ID, input);
            await ctx.reply('‚úÖ –ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ –∫–∞–Ω–∞–ª!');
        } catch (err) {
            console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –≤—ñ–¥–ø—Ä–∞–≤—Ü—ñ:', err);
            await ctx.reply(`‚ö†Ô∏è –ü–æ–º–∏–ª–∫–∞: ${err.message}`);
        }
    } else {
        adminMessageMode[userId] = true;
        await ctx.reply('üìù –†–µ–∂–∏–º –≤—ñ–¥–ø—Ä–∞–≤–∫–∏ –∞–∫—Ç–∏–≤–æ–≤–∞–Ω–æ!\n\n–¢–µ–ø–µ—Ä –Ω–∞–¥—ñ—à–ª—ñ—Ç—å –º–µ–Ω—ñ –±—É–¥—å-—â–æ (—Ç–µ–∫—Å—Ç, —Ñ–æ—Ç–æ, –≤—ñ–¥–µ–æ, GIF, –¥–æ–∫—É–º–µ–Ω—Ç), —ñ —è –≤—ñ–¥–ø—Ä–∞–≤–ª—é —Ü–µ –≤ –∫–∞–Ω–∞–ª.\n\n–î–ª—è —Å–∫–∞—Å—É–≤–∞–Ω–Ω—è: /cancel');
    }
});

bot.command('cancel', async ctx => {
    const userId = ctx.from.id.toString();
    if (userId !== TELEGRAM_CONFIG.ADMIN_ID.toString()) return;

    if (adminMessageMode[userId]) {
        delete adminMessageMode[userId];
        await ctx.reply('‚ùå –†–µ–∂–∏–º –≤—ñ–¥–ø—Ä–∞–≤–∫–∏ —Å–∫–∞—Å–æ–≤–∞–Ω–æ.');
    } else {
        await ctx.reply('‚ÑπÔ∏è –†–µ–∂–∏–º –≤—ñ–¥–ø—Ä–∞–≤–∫–∏ –Ω–µ –±—É–≤ –∞–∫—Ç–∏–≤–Ω–∏–π.');
    }
});

bot.on('text', async ctx => {
    const text = ctx.message.text;
    if (ctx.chat.type !== 'private') return;
    if (text.startsWith('/')) return;
    if (!['–ù–∞ –¥–µ–Ω—å ‚òÄÔ∏è', '–ù–∞ —Ç–∏–∂–¥–µ–Ω—å üìÖ', '–ù–∞ –º—ñ—Å—è—Ü—å üåï'].includes(text)) {
        const message = sanitizeUserMarkdown(`ü§î –í–∏ –≤–≤–µ–ª–∏ –Ω–µ–≤—ñ–¥–æ–º—É –∫–æ–º–∞–Ω–¥—É\\. –û–±–µ—Ä—ñ—Ç—å –ø–æ—Ç—Ä—ñ–±–Ω–∏–π –ø—Ä–æ–≥–Ω–æ–∑ –Ω–∏–∂—á–µ:`);
        await ctx.replyWithMarkdownV2(message, { reply_markup: predictionReplyKeyboard });
    }
});

bot.launch();
console.log('üåü Gemini –±–æ—Ç –∑–∞–ø—É—â–µ–Ω–∏–π —ñ –æ—á—ñ–∫—É—î —Ä–æ–∑–∫–ª–∞–¥—É');

process.once('SIGINT', () => bot.stop('SIGINT'));
process.once('SIGTERM', () => bot.stop('SIGTERM'));